Day 2

1.  Write a program to print exponent part of double variable in hexadecimal and binary format.
lets say we have x = 0.7, the exponent in hex is 0x3FE and 0b01111111110
You may use the below link to validate you output
https://baseconvert.com/ieee-754-floating-point

Topics to be covered
- Pointers
- Bitwise Operators
Ans - 

#include <stdio.h>

void printExponent(double x) {
    unsigned long long *ptr = (unsigned long long *)&x;
    unsigned long long exponent = (*ptr >> 52) & 0x7FF;
    
    // Printing exponent in hexadecimal format
    printf("Exponent (Hex): 0x%llx\n", exponent);
    
    // Printing exponent in binary format
    printf("Exponent (Binary): ");
    for (int i = 10; i >= 0; i--) {
        int bit = (exponent >> i) & 1;
        printf("%d", bit);
    }
    printf("\n");
}

int main() {
    double x = 0.7;
    printExponent(x);
    return 0;
}

2. Write a program to swap any type of data passed to an function.
Topics to be covered
- Pointers
- Type Casting
Ans - 

#include <stdio.h>

void swap(void* ptr1, void* ptr2, size_t size) {
    char temp[size];

    // Copy the contents of ptr1 to temp
    memcpy(temp, ptr1, size);

    // Copy the contents of ptr2 to ptr1
    memcpy(ptr1, ptr2, size);

    // Copy the contents of temp to ptr2
    memcpy(ptr2, temp, size);
}

int main() {
    int num1 = 10, num2 = 20;
    printf("Before swap: num1 = %d, num2 = %d\n", num1, num2);

    // Swapping two integers
    swap(&num1, &num2, sizeof(int));
    printf("After swap: num1 = %d, num2 = %d\n", num1, num2);

    float f1 = 3.14, f2 = 2.718;
    printf("Before swap: f1 = %.2f, f2 = %.2f\n", f1, f2);

    // Swapping two floats
    swap(&f1, &f2, sizeof(float));
    printf("After swap: f1 = %.2f, f2 = %.2f\n", f1, f2);

    char ch1 = 'A', ch2 = 'B';
    printf("Before swap: ch1 = %c, ch2 = %c\n", ch1, ch2);

    // Swapping two characters
    swap(&ch1, &ch2, sizeof(char));
    printf("After swap: ch1 = %c, ch2 = %c\n", ch1, ch2);

    return 0;
}

3.  Write a program to sum every alternate elements of a given array starting for element 0 . For example, let's say we have a[5] = {10, 20, 30, 40, 50}, the result should be 10 + 30 + 50 = 90

Topics to be covered
- Arrays
- Loops
- Basic Operators
Ans - 

#include <stdio.h>

int main() {
    int a[] = {10, 20, 30, 40, 50};
    int size = sizeof(a) / sizeof(a[0]);
    int sum = 0;

    for (int i = 0; i < size; i += 2) {
        sum += a[i];
    }

    printf("Sum of alternate elements: %d\n", sum);

    return 0;
}

4. Write a program to find total number of bits set in a given array.
Say we have a array of 3 elements
a[3] = {0x1, 0xF4, 0x10001};
The total number of set bits in the given array is
1 bit in 0x01, 5 in 0xF4, 2 in 0x10001, so the total is 1 + 5 + 2 = 8 bits

Topics to be covered
- Arrays
- Loops
- Bitwise Operators
Ans - 

#include <stdio.h>

int countSetBits(unsigned int num) {
    int count = 0;
    
    while (num) {
        count += num & 1;
        num >>= 1;
    }
    
    return count;
}

int main() {
    unsigned int a[] = {0x1, 0xF4, 0x10001};
    int size = sizeof(a) / sizeof(a[0]);
    int totalSetBits = 0;

    for (int i = 0; i < size; i++) {
        totalSetBits += countSetBits(a[i]);
    }

    printf("Total number of set bits: %d\n", totalSetBits);

    return 0;
}


LEVEL 2

1. Write a program to swap every alternate element of a given array starting for element 0
For example, let's say we have a[5] = {10, 20, 30, 40, 50}, the result should be a[5] = {30, 20, 10, 40, 50}
one more example a[5] = {10, 20, 30, 40, 50, 60}, the result should be a[5] = {30, 20, 10, 60, 50, 40}

Topics to be covered
- Arrays
- Loops
- Basic Operators
Ans - 

#include <stdio.h>

void swapAlternate(int arr[], int size) {
    for (int i = 0; i < size - 1; i += 2) {
        int temp = arr[i];
        arr[i] = arr[i + 2];
        arr[i + 2] = temp;
    }
}

int main() {
    int arr1[] = {10, 20, 30, 40, 50};
    int size1 = sizeof(arr1) / sizeof(arr1[0]);

    printf("Before swap: ");
    for (int i = 0; i < size1; i++) {
        printf("%d ", arr1[i]);
    }

    swapAlternate(arr1, size1);

    printf("\nAfter swap: ");
    for (int i = 0; i < size1; i++) {
        printf("%d ", arr1[i]);
    }

    int arr2[] = {10, 20, 30, 40, 50, 60};
    int size2 = sizeof(arr2) / sizeof(arr2[0]);

    printf("\n\nBefore swap: ");
    for (int i = 0; i < size2; i++) {
        printf("%d ", arr2[i]);
    }

    swapAlternate(arr2, size2);

    printf("\nAfter swap: ");
    for (int i = 0; i < size2; i++) {
        printf("%d ", arr2[i]);
    }

    return 0;
}
2. W.A.P to compare the items in a box, assume equal size boxes
Boxes shall have unique items stored in random order
Boxes are compared True if there is one to one mapping of items
return the final result 1 or 0

Example of Equal Boxes:
A[3] = {200, 10, -90}
B[3] = {-90, 200, 10}    

Example of Unequal Boxes:
A[3] = {200, 9, -90}
B[3] = {-90, 200, 10}    

Note: The array should not be sorted

Topics to be covered
- Arrays
- Loops
- Basic Operators
Ans - 

#include <stdio.h>

int compareBoxes(int box1[], int box2[], int size) {
    int count[size];

    // Initialize count array with all elements as 0
    for (int i = 0; i < size; i++) {
        count[i] = 0;
    }

    // Count the occurrences of items in box1
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (box1[i] == box2[j] && count[j] == 0) {
                count[j] = 1;
                break;
            }
        }
    }

    // Check if all items in box2 are found in box1
    for (int i = 0; i < size; i++) {
        if (count[i] == 0) {
            return 0;  // Mismatch found
        }
    }

    return 1;  // One-to-one mapping found
}

int main() {
    int box1[] = {200, 10, -90};
    int box2[] = {-90, 200, 10};
    int size = sizeof(box1) / sizeof(box1[0]);

    int result = compareBoxes(box1, box2, size);

    printf("Result: %d\n", result);

    return 0;
}

3. Suppose 7 names are stored in an array of pointers names[] as shown below:
 char *name[]={
        "Santosh", "Amol", "Santosh Jain", "Kishore", "Rahul", "Amolkumar", "Hemant"
          }
Write a program to arrange these names in alphabetical order.
Ans - 

#include <stdio.h>
#include <string.h>

int main() {
    char *names[] = {
        "Santosh", "Amol", "Santosh Jain", "Kishore", "Rahul", "Amolkumar", "Hemant"
    };
    int size = sizeof(names) / sizeof(names[0]);

    // Sort the names in alphabetical order using bubble sort
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (strcmp(names[j], names[j + 1]) > 0) {
                // Swap names[j] and names[j + 1]
                char *temp = names[j];
                names[j] = names[j + 1];
                names[j + 1] = temp;
            }
        }
    }

    // Print the sorted names
    printf("Names in alphabetical order:\n");
    for (int i = 0; i < size; i++) {
        printf("%s\n", names[i]);
    }

    return 0;
}


4. Write a function xstrchr() which scans a string from beginning to end in search of a character. 
If the character is found, it should return a pointer to the first occurrence of the given character in the string.
If the given character is not found, the function returns a NULL.
The prototype of the function should be:

char *xstrchr(char *string, char ch):
Ans - 
#include <stdio.h>

char *xstrchr(char *string, char ch) {
    while (*string != '\0') {
        if (*string == ch) {
            return string;  // Character found, return pointer to it
        }
        string++;  // Move to the next character in the string
    }

    return NULL;  // Character not found, return NULL
}

int main() {
    char str[] = "Hello, World!";
    char ch1 = 'o';
    char ch2 = 'z';

    char *result1 = xstrchr(str, ch1);
    char *result2 = xstrchr(str, ch2);

    if (result1 != NULL) {
        printf("Character '%c' found at position %ld\n", ch1, result1 - str);
    } else {
        printf("Character '%c' not found\n", ch1);
    }

    if (result2 != NULL) {
        printf("Character '%c' found at position %ld\n", ch2, result2 - str);
    } else {
        printf("Character '%c' not found\n", ch2);
    }

    return 0;
}

5.Write a program to encode any given string such that it gets converted into an unrecognizable form. 
Also write a decode function to get back the original string.
Ans - 
#include <stdio.h>
#include <string.h>

// Function to encode a string using a substitution cipher
void encode(char *string, int key) {
    int length = strlen(string);

    for (int i = 0; i < length; i++) {
        if (string[i] != ' ') {
            // Apply the key to shift the character
            string[i] = (string[i] + key) % 256;
        }
    }
}

// Function to decode an encoded string using the same substitution cipher
void decode(char *string, int key) {
    int length = strlen(string);

    for (int i = 0; i < length; i++) {
        if (string[i] != ' ') {
            // Reverse the key to shift the character back to its original form
            string[i] = (string[i] - key + 256) % 256;
        }
    }
}

int main() {
    char message[] = "Hello, World!";
    int key = 5;

    printf("Original message: %s\n", message);

    // Encode the message
    encode(message, key);
    printf("Encoded message: %s\n", message);

    // Decode the message
    decode(message, key);
    printf("Decoded message: %s\n", message);

    return 0;
}
