Day 6
L1
1.File Copy: Write a C program to copy a file using file operations
Ans-
#include <stdio.h>

#define BUFFER_SIZE 1024

int main() {
    FILE *sourceFile, *targetFile;
    char sourceFilePath[100], targetFilePath[100];
    char buffer[BUFFER_SIZE];
    size_t bytesRead;
    
    printf("Enter the path of the source file: ");
    scanf("%s", sourceFilePath);

    sourceFile = fopen(sourceFilePath, "rb");
    if (sourceFile == NULL) {
        printf("Unable to open the source file.\n");
        return 1;
    }

    printf("Enter the path of the target file: ");
    scanf("%s", targetFilePath);

    targetFile = fopen(targetFilePath, "wb");
    if (targetFile == NULL) {
        printf("Unable to create or open the target file.\n");
        fclose(sourceFile);
        return 1;
    }

    while ((bytesRead = fread(buffer, 1, BUFFER_SIZE, sourceFile)) > 0) {
        fwrite(buffer, 1, bytesRead, targetFile);
    }

    fclose(sourceFile);
    fclose(targetFile);

    printf("File copied successfully.\n");

    return 0;
}

2.Case Handler:
Write a C program to copy a file by considering the user option to handle the text case
-u, to change file content to Upper Case
-l, to change file content to Lower Case
-s, to change file content to Sentence Case
if no options are passed then it should be a normal copy

Example, say we have a file f1 with the following content
f1:
-----------------------
This is the file data
testing Case copy
application
-----------------------

./cp -s f1 f2
f2:
-----------------------
This Is The Tile Data
Testing Case Copy
Application
-----------------------

./cp -l f1 f3
f3:
-----------------------
this is the tile data
testing case copy
application
-----------------------

./cp -u f1 f4
f4:
-----------------------
THIS IS THE FILE DATA
TESTING CASE COPY
APPLICATION
-----------------------

./cp f1 f5
Should perform a normal copy
Ans-

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define BUFFER_SIZE 1024

void convertToUpper(char* str) {
    while (*str) {
        *str = toupper((unsigned char)*str);
        str++;
    }
}

void convertToLower(char* str) {
    while (*str) {
        *str = tolower((unsigned char)*str);
        str++;
    }
}

void convertToSentenceCase(char* str) {
    int capitalizeNext = 1;
    while (*str) {
        if (isalpha((unsigned char)*str)) {
            if (capitalizeNext) {
                *str = toupper((unsigned char)*str);
                capitalizeNext = 0;
            } else {
                *str = tolower((unsigned char)*str);
            }
        } else if (*str == '.' || *str == '?' || *str == '!') {
            capitalizeNext = 1;
        }
        str++;
    }
}

int main(int argc, char* argv[]) {
    if (argc < 3) {
        printf("Insufficient arguments. Usage: ./cp <option> <sourceFile> <targetFile>\n");
        return 1;
    }

    char* option = argv[1];
    char* sourceFilePath = argv[2];
    char* targetFilePath = argv[3];

    FILE* sourceFile = fopen(sourceFilePath, "r");
    if (sourceFile == NULL) {
        printf("Unable to open the source file.\n");
        return 1;
    }

    FILE* targetFile = fopen(targetFilePath, "w");
    if (targetFile == NULL) {
        printf("Unable to create or open the target file.\n");
        fclose(sourceFile);
        return 1;
    }

    char buffer[BUFFER_SIZE];
    size_t bytesRead;

    while ((bytesRead = fread(buffer, 1, BUFFER_SIZE, sourceFile)) > 0) {
        if (strcmp(option, "-u") == 0) {
            convertToUpper(buffer);
        } else if (strcmp(option, "-l") == 0) {
            convertToLower(buffer);
        } else if (strcmp(option, "-s") == 0) {
            convertToSentenceCase(buffer);
        }
        fwrite(buffer, 1, bytesRead, targetFile);
    }

    fclose(sourceFile);
    fclose(targetFile);

    printf("File copied successfully.\n");

    return 0;
}

3.Data Viewer:
Write an application to view the log stored in data.csv
Example, say you have the following data in data.csv

------------------------------------

EntryNo,sensorNo,Temperature,Humidity,Light,

1,S1,36.5,100,50,10:30:50
2,S3,30,100,50,10:30:55
3,S2,-6.6,100,10,10:31:00
------------------------------------

a. Write a function to extract each line in the .csv file and store it in an array of structures. 

b. Also implement functions to display the contents of the array of structures.
Ans-
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ENTRIES 100
#define MAX_FIELD_SIZE 20

struct LogEntry {
    int entryNo;
    char sensorNo[MAX_FIELD_SIZE];
    float temperature;
    int humidity;
    int light;
    char timestamp[MAX_FIELD_SIZE];
};

void extractLogEntries(struct LogEntry* entries, int* numEntries) {
    FILE* file = fopen("data.csv", "r");
    if (file == NULL) {
        printf("Failed to open the data file.\n");
        return;
    }

    char line[256];
    fgets(line, sizeof(line), file);  // Skip the header line

    *numEntries = 0;
    while (fgets(line, sizeof(line), file) != NULL && *numEntries < MAX_ENTRIES) {
        char* token = strtok(line, ",");
        entries[*numEntries].entryNo = atoi(token);

        token = strtok(NULL, ",");
        strncpy(entries[*numEntries].sensorNo, token, MAX_FIELD_SIZE);

        token = strtok(NULL, ",");
        entries[*numEntries].temperature = atof(token);

        token = strtok(NULL, ",");
        entries[*numEntries].humidity = atoi(token);

        token = strtok(NULL, ",");
        entries[*numEntries].light = atoi(token);

        token = strtok(NULL, ",");
        strncpy(entries[*numEntries].timestamp, token, MAX_FIELD_SIZE);

        (*numEntries)++;
    }

    fclose(file);
}

void displayLogEntries(const struct LogEntry* entries, int numEntries) {
    printf("Log Entries:\n");
    printf("----------\n");
    printf("%-8s %-10s %-12s %-8s %-8s\n", "EntryNo", "SensorNo", "Temperature", "Humidity", "Light");
    printf("----------\n");

    for (int i = 0; i < numEntries; i++) {
        printf("%-8d %-10s %-12.2f %-8d %-8d\n",
               entries[i].entryNo,
               entries[i].sensorNo,
               entries[i].temperature,
               entries[i].humidity,
               entries[i].light);
    }

    printf("---------\n");
}

int main() {
    struct LogEntry entries[MAX_ENTRIES];
    int numEntries = 0;

    extractLogEntries(entries, &numEntries);
    displayLogEntries(entries, numEntries);

    return 0;
}

L2

1. Sort the above "data.csv" based on the "Temperature" field in descending order
a. Use only file handling concepts
b. Use array of structures and file handling
Ans-
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 256
#define MAX_ENTRIES 100

struct LogEntry {
    int entryNo;
    char sensorNo[MAX_LINE_LENGTH];
    float temperature;
    int humidity;
    int light;
    char timestamp[MAX_LINE_LENGTH];
};

int compareFloat(const void* a, const void* b) {
    float tempA = ((struct LogEntry*)a)->temperature;
    float tempB = ((struct LogEntry*)b)->temperature;

    if (tempA < tempB)
        return 1;
    else if (tempA > tempB)
        return -1;
    else
        return 0;
}

void sortLogEntries() {
    FILE* file = fopen("data.csv", "r");
    if (file == NULL) {
        printf("Failed to open the data file.\n");
        return;
    }

    struct LogEntry entries[MAX_ENTRIES];
    char line[MAX_LINE_LENGTH];
    int numEntries = 0;

    fgets(line, sizeof(line), file);  // Skip the header line

    while (fgets(line, sizeof(line), file) != NULL && numEntries < MAX_ENTRIES) {
        sscanf(line, "%d,%[^,],%f,%d,%d,%[^,\n]", &entries[numEntries].entryNo,
               entries[numEntries].sensorNo, &entries[numEntries].temperature,
               &entries[numEntries].humidity, &entries[numEntries].light,
               entries[numEntries].timestamp);

        numEntries++;
    }

    fclose(file);

    qsort(entries, numEntries, sizeof(struct LogEntry), compareFloat);

    file = fopen("data.csv", "w");
    if (file == NULL) {
        printf("Failed to open the data file for writing.\n");
        return;
    }

    fprintf(file, "EntryNo,sensorNo,Temperature,Humidity,Light,Timestamp\n");

    for (int i = 0; i < numEntries; i++) {
        fprintf(file, "%d,%s,%.2f,%d,%d,%s\n", entries[i].entryNo,
                entries[i].sensorNo, entries[i].temperature,
                entries[i].humidity, entries[i].light, entries[i].timestamp);
    }

    fclose(file);

    printf("Sorting completed successfully.\n");
}

int main() {
    sortLogEntries();

    return 0;
}

2. Update an entry in the data.csv based on the "EntryNo" field
a. Use only file handling concepts
b. Use array of structures and file handling
Ans-
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 256
#define MAX_ENTRIES 100

struct LogEntry {
    int entryNo;
    char sensorNo[MAX_LINE_LENGTH];
    float temperature;
    int humidity;
    int light;
    char timestamp[MAX_LINE_LENGTH];
};

void updateEntry(int entryNo, const char* newSensorNo, float newTemperature, int newHumidity, int newLight) {
    FILE* file = fopen("data.csv", "r");
    if (file == NULL) {
        printf("Failed to open the data file.\n");
        return;
    }

    struct LogEntry entries[MAX_ENTRIES];
    char line[MAX_LINE_LENGTH];
    int numEntries = 0;

    fgets(line, sizeof(line), file);  // Skip the header line

    while (fgets(line, sizeof(line), file) != NULL && numEntries < MAX_ENTRIES) {
        sscanf(line, "%d,%[^,],%f,%d,%d,%[^,\n]", &entries[numEntries].entryNo,
               entries[numEntries].sensorNo, &entries[numEntries].temperature,
               &entries[numEntries].humidity, &entries[numEntries].light,
               entries[numEntries].timestamp);

        numEntries++;
    }

    fclose(file);

    int entryIndex = -1;
    for (int i = 0; i < numEntries; i++) {
        if (entries[i].entryNo == entryNo) {
            entryIndex = i;
            break;
        }
    }

    if (entryIndex != -1) {
        strncpy(entries[entryIndex].sensorNo, newSensorNo, MAX_LINE_LENGTH);
        entries[entryIndex].temperature = newTemperature;
        entries[entryIndex].humidity = newHumidity;
        entries[entryIndex].light = newLight;

        file = fopen("data.csv", "w");
        if (file == NULL) {
            printf("Failed to open the data file for writing.\n");
            return;
        }

        fprintf(file, "EntryNo,sensorNo,Temperature,Humidity,Light,Timestamp\n");

        for (int i = 0; i < numEntries; i++) {
            fprintf(file, "%d,%s,%.2f,%d,%d,%s\n", entries[i].entryNo,
                    entries[i].sensorNo, entries[i].temperature,
                    entries[i].humidity, entries[i].light, entries[i].timestamp);
        }

        fclose(file);

        printf("Entry updated successfully.\n");
    } else {
        printf("Entry with EntryNo %d not found.\n", entryNo);
    }
}

int main() {
    int entryNo = 2; 
    const char* newSensorNo = "S4";
    float newTemperature = 28.5;
    int newHumidity = 90;
    int newLight = 60;

    updateEntry(entryNo, newSensorNo, newTemperature, newHumidity, newLight);

    return 0;
}

3. Delete an entry in the file data.csv file  on the "EntryNo" field
a. Use only file handling concepts
b. Use array of structures and file handling
Ans=
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 256
#define MAX_ENTRIES 100

void deleteEntry(int entryNo) {
    FILE* file = fopen("data.csv", "r");
    if (file == NULL) {
        printf("Failed to open the data file.\n");
        return;
    }

    FILE* tempFile = fopen("temp.csv", "w");
    if (tempFile == NULL) {
        printf("Failed to create temporary file.\n");
        fclose(file);
        return;
    }

    char line[MAX_LINE_LENGTH];
    fgets(line, sizeof(line), file);  
    fputs(line, tempFile);

    int deleted = 0;
    while (fgets(line, sizeof(line), file) != NULL) {
        int currentEntryNo;
        sscanf(line, "%d,", &currentEntryNo);

        if (currentEntryNo != entryNo) {
            fputs(line, tempFile);
        } else {
            deleted = 1;
        }
    }

    fclose(file);
    fclose(tempFile);

    if (deleted) {
        remove("data.csv");
        rename("temp.csv", "data.csv");
        printf("Entry deleted successfully.\n");
    } else {
        remove("temp.csv");
        printf("Entry with EntryNo %d not found.\n", entryNo);
    }
}

int main() {
    int entryNo = 2; 

    deleteEntry(entryNo);

    return 0;
}
