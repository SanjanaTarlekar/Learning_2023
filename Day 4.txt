Day 4
L1
1.
#include <stdio.h>

void sum_and_average(int *array, int size, int *sum, float *average) {
  *sum = 0;
  for (int i = 0; i < size; i++) {
    *sum += array[i];
  }
  *average = (float)*sum / size;
}

int main() {
  int array[] = {12, 84, 20, 36, 64, 56, 72, 10, 45, 90};
  int sum;
  float average;
  
  sum_and_average(array, sizeof(array) / sizeof(int), &sum, &average);
  
  printf("Sum: %d\n", sum);
  printf("Average: %.2f\n", average);
  
  return 0;
}

2.
#include <stdio.h>

void min_and_max(int *array, int size, int *min, int *max) {
  *min = array[0];
  *max = array[0];
  
  for (int i = 1; i < size; i++) {
    if (array[i] < *min) {
      *min = array[i];
    } 
    else if (array[i] > *max) {
      *max = array[i];
    }
  }
}

int main() {
  int array[] = {64, 84, 20, 36, 12, 90, 72, 10, 45, 56};
  int min, max;
  
  min_and_max(array, sizeof(array) / sizeof(int), &min, &max);
  
  printf("Min: %d\n", min);
  printf("Max: %d\n", max);
  
  return 0;
}

3.
#include <stdio.h>

void reverse_array(int *array, int size) {
  int i = 0;
  int j = size - 1;
  while (i < j) {
    int temp = array[i];
    array[i] = array[j];
    array[j] = temp;
    i++;
    j--;
  }
}

int main() {
  int array[] = {64, 84, 20, 36, 12, 90, 72, 10, 45, 56};
  int size = sizeof(array) / sizeof(int);
  printf("Original Array: ");
  for (int i = 0; i < size; i++) {
    printf("%d ", array[i]);
  }
  printf("\n");

  reverse_array(array, size);

  printf("Reversed Array: ");
  for (int i = 0; i < size; i++) {
    printf("%d ", array[i]);
  }
  printf("\n");

  return 0;
}

4.
#include <stdio.h>

int sum_of_even_elements(int *array, int size) {
  int sum = 0;
  for (int i = 0; i < size; i++) {
    if (array[i] % 2 == 0) {
      sum += array[i];
    }
  }
  return sum;
}

int sum_of_odd_elements(int *array, int size) {
  int sum = 0;
  for (int i = 0; i < size; i++) {
    if (array[i] % 2 != 0) {
      sum += array[i];
    }
  }
  return sum;
}

int main() {
  int array[] = {64, 84, 21, 36, 17, 90, 77, 10, 48, 55};
  int size = sizeof(array) / sizeof(int);
  int sum_of_even = sum_of_even_elements(array, size);
  int sum_of_odd = sum_of_odd_elements(array, size);
  int difference = sum_of_even - sum_of_odd;
  
  printf("Sum of even elements: %d\n", sum_of_even);
  printf("Sum of odd elements: %d\n", sum_of_odd);
  printf("Difference between even and odd elements: %d\n", difference);
  
  return 0;
}

5.
#include <stdio.h>

int sum_of_even_indexed_elements(int *array, int size) {
  int sum = 0;
  for (int i = 0; i < size; i += 2) {
    sum += array[i];
  }
  return sum;
}

int sum_of_odd_indexed_elements(int *array, int size) {
  int sum = 0;
  for (int i = 1; i < size; i += 2) {
    sum += array[i];
  }
  return sum;
}

int main() {
  int array[] = {64, 84, 21, 36, 17, 90, 77, 10, 48, 55};
  int size = sizeof(array) / sizeof(int);
  int sum_of_even_indexed = sum_of_even_indexed_elements(array, size);
  int sum_of_odd_indexed = sum_of_odd_indexed_elements(array, size);
  int difference = sum_of_even_indexed - sum_of_odd_indexed;
  
  printf("Sum of even indexed elements: %d\n", sum_of_even_indexed);
  printf("Sum of odd indexed elements: %d\n", sum_of_odd_indexed);
  printf("Difference between even and odd indexed elements: %d\n", difference);
  
  return 0;
}

L2
1. Data Parser:
   A data logger transmits the data in ascii format as shown below
   "S1-T:36.5-H:100-L:50"
   Write a function to populate all the data in an array of structure. The output should be like
   Sensor Info:
   ---------------------
   Sensor ID: S1
   Temperature: 36.5 C
   Humidity: 100
   Light Intensity: 50%
   ---------------------
Ans-
#include <stdio.h>
#include <string.h>

#define MAX_DATA_LEN 100

typedef struct {
    char sensorID[3];
    float temperature;
    int humidity;
    int lightIntensity;
} SensorInfo;

void parseData(const char* data, SensorInfo* info) {
    sscanf(data, "S%2[^-]-T:%f-H:%d-L:%d", info->sensorID, &info->temperature, &info->humidity, &info->lightIntensity);
}

void printSensorInfo(const SensorInfo* info) {
    printf("Sensor Info:\n");
    printf("---------------------\n");
    printf("Sensor ID: %s\n", info->sensorID);
    printf("Temperature: %.1f C\n", info->temperature);
    printf("Humidity: %d\n", info->humidity);
    printf("Light Intensity: %d%%\n", info->lightIntensity);
    printf("---------------------\n");
}

int main() {
    const char* data = "S1-T:36.5-H:100-L:50";
    SensorInfo info;

    parseData(data, &info);
    printSensorInfo(&info);

    return 0;
}

2. Write a program to enter to Cartesian coordinate points and display the distance between them.
Ans-
#include <stdio.h>
#include <math.h>

typedef struct {
    double x;
    double y;
} Point;

double calculateDistance(const Point* p1, const Point* p2) {
    double dx = p2->x - p1->x;
    double dy = p2->y - p1->y;
    return sqrt(dx * dx + dy * dy);
}

int main() {
    Point p1, p2;
    printf("Enter the coordinates of Point 1 (x y): ");
    scanf("%lf %lf", &p1.x, &p1.y);

    printf("Enter the coordinates of Point 2 (x y): ");
    scanf("%lf %lf", &p2.x, &p2.y);

    double distance = calculateDistance(&p1, &p2);

    printf("The distance between the two points is: %.2lf\n", distance);

    return 0;
}

3. Implement structures to read, write and compute average- marks and the students scoring above
   and below the average marks for a class of N students.
Ans-
#include <stdio.h>

#define MAX_STUDENTS 100

typedef struct {
    char name[50];
    int marks;
} Student;

void readStudents(Student students[], int n) {
    printf("Enter details for each student:\n");
    for (int i = 0; i < n; i++) {
        printf("Student %d:\n", i + 1);
        printf("Name: ");
        scanf("%s", students[i].name);
        printf("Marks: ");
        scanf("%d", &students[i].marks);
    }
}

void writeStudents(Student students[], int n) {
    printf("Student details:\n");
    for (int i = 0; i < n; i++) {
        printf("Student %d:\n", i + 1);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %d\n", students[i].marks);
    }
}

double calculateAverage(Student students[], int n) {
    int total = 0;
    for (int i = 0; i < n; i++) {
        total += students[i].marks;
    }
    return (double)total / n;
}

void printAboveAverage(Student students[], int n, double average) {
    printf("Students scoring above the average marks:\n");
    for (int i = 0; i < n; i++) {
        if (students[i].marks > average) {
            printf("%s\n", students[i].name);
        }
    }
}

void printBelowAverage(Student students[], int n, double average) {
    printf("Students scoring below the average marks:\n");
    for (int i = 0; i < n; i++) {
        if (students[i].marks < average) {
            printf("%s\n", students[i].name);
        }
    }
}

int main() {
    int n;
    printf("Enter the number of students: ");
    scanf("%d", &n);

    if (n > MAX_STUDENTS) {
        printf("Maximum number of students exceeded. Please try again.\n");
        return 0;
    }

    Student students[MAX_STUDENTS];
    readStudents(students, n);

    double average = calculateAverage(students, n);
    printf("Average marks: %.2lf\n", average);

    printAboveAverage(students, n, average);
    printBelowAverage(students, n, average);

    return 0;
}

4. Write a program to pass a pointer to a structure as a parameter to a function and return back a pointer to structure 
   to the calling function after modifying the members of structure.
Ans-
#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int id;
    char name[50];
} Student;


void modifyStudent(Student* student) {
    student->id = 101;
    strcpy(student->name, "John Doe");
}


Student* getModifiedStudent() {
    Student* student = (Student*)malloc(sizeof(Student));

    student->id = 102;
    strcpy(student->name, "Jane Smith");

    return student;
}

int main() {
    Student student;
    student.id = 100;
    strcpy(student.name, "Alice");
    modifyStudent(&student);

    printf("Modified Student:\n");
    printf("ID: %d\n", student.id);
    printf("Name: %s\n", student.name);

    Student* modifiedStudent = getModifiedStudent();

    printf("\nModified Student (returned from function):\n");
    printf("ID: %d\n", modifiedStudent->id);
    printf("Name: %s\n", modifiedStudent->name);

    free(modifiedStudent);

    return 0;
}
